// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Localiza.Base.Models
{
    public partial class CUsersferraOneDriveÁreadeTrabalhodatabasedbContext : DbContext
    {
        public CUsersferraOneDriveÁreadeTrabalhodatabasedbContext()
        {
        }

        public CUsersferraOneDriveÁreadeTrabalhodatabasedbContext(DbContextOptions<CUsersferraOneDriveÁreadeTrabalhodatabasedbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CadLocacao> CadLocacao { get; set; }
        public virtual DbSet<CadVeiculo> CadVeiculo { get; set; }
        public virtual DbSet<PesCliente> PesCliente { get; set; }
        public virtual DbSet<SegUsuario> SegUsuario { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlite("Data Source=database.db");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CadLocacao>(entity =>
            {
                entity.HasKey(e => e.IdLocacao);

                entity.ToTable("cad_locacao");

                entity.Property(e => e.IdLocacao).HasColumnName("id_locacao");

                entity.Property(e => e.Abastecido)
                    .HasColumnType("NUMERIC")
                    .HasColumnName("abastecido");

                entity.Property(e => e.Amassado)
                    .HasColumnType("NUMERIC")
                    .HasColumnName("amassado");

                entity.Property(e => e.Arranhado)
                    .HasColumnType("NUMERIC")
                    .HasColumnName("arranhado");

                entity.Property(e => e.CodigoCliente).HasColumnName("codigo_cliente");

                entity.Property(e => e.CodigoVeiculo).HasColumnName("codigo_veiculo");

                entity.Property(e => e.Limpo).HasColumnName("limpo");

                entity.Property(e => e.Retorno)
                    .HasColumnType("NUMERIC")
                    .HasColumnName("retorno");

                entity.Property(e => e.Saida)
                    .HasColumnType("NUMERIC")
                    .HasColumnName("saida");

                entity.Property(e => e.Total)
                    .HasColumnType("NUMERIC")
                    .HasColumnName("total");

                entity.HasOne(d => d.CodigoClienteNavigation)
                    .WithMany(p => p.CadLocacao)
                    .HasForeignKey(d => d.CodigoCliente);

                entity.HasOne(d => d.CodigoVeiculoNavigation)
                    .WithMany(p => p.CadLocacao)
                    .HasForeignKey(d => d.CodigoVeiculo);
            });

            modelBuilder.Entity<CadVeiculo>(entity =>
            {
                entity.HasKey(e => e.IdVeiculo);

                entity.ToTable("cad_veiculo");

                entity.Property(e => e.IdVeiculo).HasColumnName("id_veiculo");

                entity.Property(e => e.Combustivel).HasColumnName("combustivel");

                entity.Property(e => e.Marca).HasColumnName("marca");

                entity.Property(e => e.Modelo).HasColumnName("modelo");

                entity.Property(e => e.Valor)
                    .HasColumnType("NUMERIC")
                    .HasColumnName("valor");
            });

            modelBuilder.Entity<PesCliente>(entity =>
            {
                entity.HasKey(e => e.IdCliente);

                entity.ToTable("pes_cliente");

                entity.Property(e => e.IdCliente)
                    .ValueGeneratedNever()
                    .HasColumnName("id_cliente");

                entity.Property(e => e.Bairro).HasColumnName("bairro");

                entity.Property(e => e.Cep).HasColumnName("cep");

                entity.Property(e => e.Cidade).HasColumnName("cidade");

                entity.Property(e => e.Complemento).HasColumnName("complemento");

                entity.Property(e => e.DataNascimento)
                    .HasColumnType("NUMERIC")
                    .HasColumnName("data_nascimento");

                entity.Property(e => e.Documento).HasColumnName("documento");

                entity.Property(e => e.Endereco).HasColumnName("endereco");

                entity.Property(e => e.Nome).HasColumnName("nome");

                entity.Property(e => e.Numero).HasColumnName("numero");
            });

            modelBuilder.Entity<SegUsuario>(entity =>
            {
                entity.HasKey(e => e.IdUsuario);

                entity.ToTable("seg_usuario");

                entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");

                entity.Property(e => e.Senha).HasColumnName("senha");

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.Usuario).HasColumnName("usuario");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}